1.Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de x milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.
#include <msp430.h>
void Atraso(volatile unsigned int x)
{
          TA0CCR0=1000-1;
          TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

          while(x>0)
          {
              x--;
              while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a flag de interrupção ser setada
              TA0CTL &=~TAIFG;            // zerando a flag de interrupção
          }
          TACTL= MC_0;                //modo stop do timerA
}

2.Pisque os LEDs da Launchpad numa frequência de 100 Hz.

#include <msp430.h> 
#define LED1 BIT0


void Atraso(volatile unsigned int x)
{
          TA0CCR0=1000-1;
          TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

          while(x>0)
          {
              x--;
              while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a flag de interrupção ser setada
              TA0CTL &=~TAIFG;            // zerando a flag de interrupção
          }
          TACTL= MC_0;                //modo stop do timerA
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    BCSCTL1= CALBC1_1MHZ;
    DCOCTL=  CALDCO_1MHZ;
    P1OUT &=~LED1;
    P1DIR |=LED1;



    while(1)
    {
        Atraso(10);
        P1OUT ^=LED1;

    }
}


3.Pisque os LEDs da Launchpad numa frequência de 20 Hz.

#include <msp430g2553.h>
#include <legacymsp430.h>
#define LED1 BIT0


void Atraso(volatile unsigned int x)
{
          TA0CCR0=1000-1;
          TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

          while(x>0)
          {
              x--;
              while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a flag de interrupção ser setada
              TA0CTL &=~TAIFG;            // zerando a flag de interrupção
          }
          TACTL= MC_0;                //modo stop do timerA
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    BCSCTL1= CALBC1_1MHZ;
    DCOCTL=  CALDCO_1MHZ;
    P1OUT &=~LED1;
    P1DIR |=LED1;



    while(1)
    {
        Atraso(50);
        P1OUT ^=LED1;

    }
}


4.Pisque os LEDs da Launchpad numa frequência de 1 Hz.

#include <msp430.h> 
#define LED1 BIT0


void Atraso(volatile unsigned int x)
{
          TA0CCR0=1000-1;
          TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

          while(x>0)
          {
              x--;
              while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a flag de interrupção ser setada
              TA0CTL &=~TAIFG;            // zerando a flag de interrupção
          }
          TACTL= MC_0;                //modo stop do timerA
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    BCSCTL1= CALBC1_1MHZ;
    DCOCTL=  CALDCO_1MHZ;
    P1OUT &=~LED1;
    P1DIR |=LED1;



    while(1)
    {
        Atraso(1000);
        P1OUT ^=LED1;

    }
}


5.Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

#include <msp430.h> 
#define LED1 BIT0


void Atraso(volatile unsigned int x)
{
          TA0CCR0=1000-1;
          TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

          while(x>0)
          {
              x--;
              while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a flag de interrupção ser setada
              TA0CTL &=~TAIFG;            // zerando a flag de interrupção
          }
          TACTL= MC_0;                //modo stop do timerA
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    BCSCTL1= CALBC1_1MHZ;
    DCOCTL=  CALDCO_1MHZ;
    P1OUT &=~LED1;
    P1DIR |=LED1;



    while(1)
    {
        Atraso(2000);
        P1OUT ^=LED1;

    }
}


6.Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.

#include <msp430g2553.h>
#include <legacymsp430.h>

#define LED1 BIT0




int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT &=~LED1;
    P1DIR |=LED1;
    TA0CCR0=62500-1;
    TA0CTL= TASSEL_2 + ID_3 + MC_1+TAIE;      //master_clock - div/8 - contador up - ativa a interrupçao

    _BIS_SR(LPM0_bits +GIE);                //modo baixo consumo 0, desligando o master_clock e deixando ativo o sub_master_clk
    return 0;
}

interrupt(TIMER0_A1_VECTOR) TA0_ISR(void)   //rotina de interrupção
{
    P1OUT ^= LED1;                          //inverte o led a cada nova chamada da interupção, ou seja quando a flag TAIFG é setada
    TA0CTL &= ~TAIFG;                     // zerando a flag TAIFG no  TAC0CTL
}




7.Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.
#include <msp430g2553.h>
#include <legacymsp430.h>
#include <stdint.h>

void Atraso(volatile unsigned int x)
{
          TA0CCR0=1000-1;
          TA0CTL=TASSEL_2 + ID_0 + MC_1; // sub_master_clock - dividir por 1 - contador up

          while(x>0)
          {
              x--;
              while((TA0CTL&TAIFG)==0);    // Fica preso aqui até a flag de interrupção ser setada
              TA0CTL &=~TAIFG;            // zerando a flag de interrupção
          }
          TACTL= MC_0;                //modo stop do timerA
}



void paralelo_serial(void)
{
    int i,N;
    N=P1IN;                        //lendo a entrada paralela e salando em x
    P2OUT |=BIT0;                  //Enviando o bit0 para a saida, indicando que ouve o inicio de uma transmiçao
    for(i=0 ;i<8;i++)
    {
        Atraso(1);                 //funçao ja criada que gera um atraso em Milisegundos
        P2OUT |=x&BIT0;           // jogamos para a saida o bit menos signifitivo
        N=(N>1);                 //desloca uma vez x para a direta
    }
    P2OUT &=~BIT0;                 //fim da transmição enviando 0 por ultimo

}



8.Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.


9.Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.

#include <msp430g2553.h>
#include <legacymsp430.h>

#define IN_AD BIT1
#define IN_AD_CH INCH_1
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (LED1|LED2)

int main(void)
{
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;

    P1OUT &= ~LEDS;
    P1DIR |= LEDS;

    // Configura o canal 1 do Timer A em modo de comparacao
    // com periodo de 0,5 segundos
    TACCR0 = 62500-1;
    TACCR1 = TACCR0/2;
    TACCTL1 = OUTMOD_7;
    TACTL = TASSEL_2 | ID_3 | MC_1;

    ADC10CTL0 = SREF_0 + ADC10SHT_0 + ADC10ON + ADC10IE;
    ADC10AE0 = IN_AD;
    // Com SHS_1, uma conversao sera requisitada
    // sempre que o canal 1 do Timer_A terminar sua contagem
    ADC10CTL1 = IN_AD_CH + SHS_1 + ADC10DIV_0 + ADC10SSEL_3 + CONSEQ_2;
    ADC10CTL0 |= ENC;

    _BIS_SR(LPM0_bits+GIE);
    return 0;
}

interrupt(ADC10_VECTOR) ADC10_ISR(void)
{
    // Acende ou apaga o LED1
    // de acordo com a leitura AD
    if(ADC10MEM < 512)
        P1OUT &= ~LED1;
    else
        P1OUT |= LED1;

    // Inverte o LED2 para vermos
    // a temporizacao da chamada
    // a esta interrupcao
    P1OUT ^= LED2;
}

